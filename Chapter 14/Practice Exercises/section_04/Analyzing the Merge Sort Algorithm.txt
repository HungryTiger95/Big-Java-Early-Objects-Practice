To understand why the merge sort algorithm is a tremendous improvement over
the selection sort algorithm. Let us estimate the number of array element
visits that are required to sort an array with the merge sort algorithm. First,
let us tackle the merge process that happens after the first and second halves
have been sorted.

Each step in the merge process adds one more element to a. That element may
come from first or second, and in most cases the elements from the two halves
must be compared to see which one to take. We'll count that as 3 visits per
element, or 3n visits total, where n denotes the length of a. Moreover, at the
beginning, we had to copy from a to first to second, yielding another 2n visits,
for a total of 5n.

If we let T(n) denote the number of visits required to sort a range of n elements
through the merge sort process, then we obtain

		T(n) = T(n / 2) + T(n / 2) + 5n
		
because sorting each half takes T(n / 2) visits. Actually, if n is not even,
then we have one subarray of size (n - 1) / 2 and one of size (n + 1) / 2.
Although it turns out that this detail does not affect the outcome of the
computation, we will nevertheless assume for now that n is a power of 2,
say n = 2^m.

Unfortunately, the formula

		T(n) = 2T(n / 2) + 5n

does not clearly tell us the relationship between n and T(n). To understand
the relationship, let us evaluate T(n / 2), using the same formula:

		T(n / 2) = 2T(n / 4) + 5(n / 2)
		
Therefore:
	
		T(n) = 2 * 2T(n / 4) + 5n + 5n
		
Let us do that again:

		T(n / 4) = 2T(n / 8) + 5(n / 4)
		
hence:

		T(n) = 2 * 2 * 2T(n / 8) + 5n + 5n + 5n
		
This generalizes from 2, 4, 8, to arbitrary powers of 2:

		T(n) 2^k * T(n / 2^k) + 5nk
		
Recall that we assume that n = 2^m; hence, for k = m,

		T(n) = 2^m * T(n / 2^m) + 5nm
			 = nT(1) + 5nm
			 = n + 5nlog2(n)

Because n = 2^m, we have m = log2(n).

To establish the growth order, we drop the lower-order term n and are left
with 5n*log2(n). We drop the constant factor 5. It is also customary to drop
the base of the logarithm, because all logarithms are related by a constant
factor.

Hence we say that merge sort is an O(n * log(n)) algorithm.

Recall that it took 100^2 = 10,000 times as long to sort a million records as
it took to sort 10,000 records with the O(n^2) algorithm. WItht he O(n * log(n))
algorithm, the ratio is:

		1,000,000 * log(1,000,000)
		-------------------------- = 100 (6 / 4) = 150
		   10,000 * log(10,000)
		   
