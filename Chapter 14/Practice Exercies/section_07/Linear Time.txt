Lets start with a simple example, an algorithm that counts how many elements have
a particular value:

		int count = 0
		for(int i = 0; i < a.length; i++)
		{
			if(a[i] == value)
			{
				count++;
			}
		}
		
What is the running time in terms of n, the length of the array?

Start with looking at the pattern of array element visits. Here, we visit each
element once. Now look at the work per visit. Does each visit involve a fixed
number of actions, independent of n? In this case, it does. There are just a few
actions - read the element, compare it, maybe increment a counter.

Therefore, the running time is n times a constant, of O(n).

What if we don't always run to the end of the array? For example, suppose we want
to check whether the value occurs in the array, without counting it:

		boolean found = false;
		for(int i = 0; !found && i < a.length; i++)
		{
			if(a[i] == value)
			{
				found = true;
			}
		}
Then the loop can stop in the middle.

Is this still O(n)? It is, because in some cases the match may be at the very end
of the array. Also, there is no match, one must traverse the entire array.